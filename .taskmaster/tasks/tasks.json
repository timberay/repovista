{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Set up project structure and development environment",
        "description": "Create the initial project directory structure with backend and frontend folders, initialize Python virtual environment, and set up basic configuration files",
        "status": "done",
        "priority": "high",
        "details": "Create project folders: backend/, frontend/, tests/. Set up Python virtual environment and install FastAPI. Create requirements.txt with initial dependencies. Set up .env file template for configuration. Initialize git repository if not already done.",
        "testStrategy": "Verify all directories exist, virtual environment activates correctly, and FastAPI can be imported successfully",
        "dependencies": []
      },
      {
        "id": 2,
        "title": "Implement Docker Registry v2 API client",
        "description": "Create a Python service class that interfaces with Docker Registry v2 API for fetching repository and tag information",
        "status": "pending",
        "priority": "high",
        "details": "Create services/registry.py with RegistryClient class. Implement authentication handling with Bearer tokens. Add methods for listing repositories and fetching tags. Handle Registry v2 API responses and errors. Implement retry logic for network failures.",
        "testStrategy": "Unit tests for API client methods, mock Registry responses, test authentication flow, verify error handling",
        "dependencies": [
          1
        ],
        "subtasks": [
          {
            "id": 1,
            "title": "Docker Registry 클라이언트 클래스 구조 설계",
            "description": "RegistryClient 클래스의 전체 구조와 인터페이스를 설계하고 기본 설정을 구현합니다",
            "dependencies": [],
            "details": "services/registry.py 파일을 생성하고 RegistryClient 클래스를 정의합니다. 초기화 메서드에서 레지스트리 URL, 타임아웃, 재시도 설정을 받도록 합니다. 클래스 속성으로 세션 객체, 기본 헤더, 설정값들을 정의합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 2,
            "title": "Bearer 토큰 인증 구현",
            "description": "Docker Registry v2 API의 Bearer 토큰 기반 인증 흐름을 구현합니다",
            "dependencies": [
              "2.1"
            ],
            "details": "Basic 인증으로 토큰 엔드포인트 호출, Bearer 토큰 획득 및 저장, 토큰 만료 시간 관리, 자동 토큰 갱신 로직을 구현합니다. WWW-Authenticate 헤더 파싱하여 인증 서버 정보를 추출합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 3,
            "title": "리포지토리 목록 조회 API 메서드 구현",
            "description": "Docker Registry의 리포지토리 목록을 가져오는 API 메서드를 구현합니다",
            "dependencies": [
              "2.2"
            ],
            "details": "GET /v2/_catalog 엔드포인트 호출 메서드를 구현합니다. 페이지네이션 파라미터(n, last) 지원, Link 헤더 파싱으로 다음 페이지 처리, 전체 리포지토리 목록 반환 기능을 포함합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 4,
            "title": "태그 정보 조회 API 메서드 구현",
            "description": "특정 리포지토리의 태그 목록과 상세 정보를 조회하는 메서드를 구현합니다",
            "dependencies": [
              "2.2"
            ],
            "details": "GET /v2/{name}/tags/list로 태그 목록 조회, GET /v2/{name}/manifests/{tag}로 매니페스트 정보 조회, 이미지 크기와 생성 날짜 추출, 다이제스트 정보 파싱 기능을 구현합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 5,
            "title": "에러 처리 및 예외 클래스 구현",
            "description": "Registry API 통신 중 발생할 수 있는 다양한 에러를 처리합니다",
            "dependencies": [
              "2.3",
              "2.4"
            ],
            "details": "커스텀 예외 클래스 정의(RegistryAuthError, RegistryNotFoundError 등), HTTP 상태 코드별 에러 처리, 네트워크 에러와 타임아웃 처리, 사용자 친화적 에러 메시지 생성을 구현합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 6,
            "title": "재시도 로직 및 회로 차단기 구현",
            "description": "네트워크 장애에 대응하는 강력한 재시도 메커니즘을 구현합니다",
            "dependencies": [
              "2.5"
            ],
            "details": "지수 백오프를 사용한 재시도 로직, 재시도 가능한 에러 타입 정의, 최대 재시도 횟수 제한, 회로 차단기 패턴으로 연속된 실패 시 일시적 차단 기능을 구현합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 7,
            "title": "응답 파싱 및 데이터 모델 변환",
            "description": "Registry API 응답을 파싱하고 Pydantic 모델로 변환합니다",
            "dependencies": [
              "2.3",
              "2.4"
            ],
            "details": "JSON 응답을 Pydantic 모델로 변환, 매니페스트 파싱으로 이미지 메타데이터 추출, 크기 계산 및 포맷팅, 날짜/시간 정보 파싱 및 표준화를 구현합니다.",
            "status": "pending",
            "testStrategy": ""
          },
          {
            "id": 8,
            "title": "캐싱 전략 구현 및 단위 테스트 작성",
            "description": "API 응답 캐싱과 포괄적인 단위 테스트를 구현합니다",
            "dependencies": [
              "2.6",
              "2.7"
            ],
            "details": "메모리 기반 캐시 구현(TTL 지원), 리포지토리와 태그 정보 캐싱, 캐시 무효화 전략, pytest를 사용한 단위 테스트 작성, 모든 메서드에 대한 mock 테스트를 구현합니다.",
            "status": "pending",
            "testStrategy": ""
          }
        ]
      },
      {
        "id": 3,
        "title": "Create repository listing API endpoint",
        "description": "Implement FastAPI endpoint to list all repositories with pagination, search, and sorting capabilities",
        "status": "pending",
        "priority": "high",
        "details": "Create GET /api/repositories endpoint. Implement query parameters for search, sort, and pagination. Return repository name, tag count, and last updated time. Add proper error handling and status codes. Implement response caching.",
        "testStrategy": "API endpoint tests with various query parameters, verify pagination logic, test search functionality, check sorting accuracy",
        "dependencies": [
          2
        ]
      },
      {
        "id": 4,
        "title": "Create tag listing API endpoint",
        "description": "Implement FastAPI endpoint to list all tags for a specific repository with metadata",
        "status": "pending",
        "priority": "high",
        "details": "Create GET /api/repositories/{name}/tags endpoint. Return tag name, digest, size, and creation date. Implement search and sorting for tags. Generate Docker pull commands. Handle repository names with slashes correctly.",
        "testStrategy": "Test with various repository names, verify tag metadata accuracy, test pull command generation, check error handling for non-existent repos",
        "dependencies": [
          2
        ]
      },
      {
        "id": 5,
        "title": "Set up CORS and API configuration",
        "description": "Configure FastAPI application with proper CORS settings, environment variables, and API documentation",
        "status": "pending",
        "priority": "medium",
        "details": "Configure CORS middleware for frontend communication. Set up environment variable loading from .env file. Configure API documentation with OpenAPI/Swagger. Add health check endpoint. Set up logging configuration.",
        "testStrategy": "Verify CORS headers in responses, test environment variable loading, check API documentation accessibility, validate health endpoint",
        "dependencies": [
          1
        ]
      },
      {
        "id": 6,
        "title": "Create HTML page structure",
        "description": "Build the main HTML page with semantic structure for repository listing and tag display",
        "status": "pending",
        "priority": "high",
        "details": "Create index.html with proper HTML5 structure. Add header with search bar and controls. Create main content area for repository grid. Add pagination controls section. Include meta tags and viewport settings for desktop.",
        "testStrategy": "Validate HTML5 compliance, check semantic structure, verify all sections render correctly, test in Chrome browser",
        "dependencies": [
          1
        ]
      },
      {
        "id": 7,
        "title": "Implement CSS styling and layout",
        "description": "Create responsive grid layout with clean design, card components, and accordion animations",
        "status": "pending",
        "priority": "medium",
        "details": "Create styles.css with CSS Grid for repository cards. Style search bar and control buttons. Design card components with hover effects. Implement accordion animation for tag details. Apply light theme with clean typography.",
        "testStrategy": "Visual testing of layout in Chrome, verify grid responsiveness, test accordion animations, check color contrast for accessibility",
        "dependencies": [
          6
        ]
      },
      {
        "id": 8,
        "title": "Build JavaScript application core",
        "description": "Create main JavaScript application structure with module pattern and state management",
        "status": "pending",
        "priority": "high",
        "details": "Create app.js with main application logic. Implement state management for repositories and tags. Set up event listeners and delegation. Create render functions for dynamic content. Implement error boundary and logging.",
        "testStrategy": "Test state management functions, verify event handling, check render performance, validate error handling",
        "dependencies": [
          6
        ]
      },
      {
        "id": 9,
        "title": "Implement API communication layer",
        "description": "Create JavaScript API client using Fetch API with error handling and loading states",
        "status": "pending",
        "priority": "high",
        "details": "Create api.js with fetch wrapper functions. Implement methods for repository and tag endpoints. Add request/response interceptors. Handle loading states and errors. Implement request debouncing for search.",
        "testStrategy": "Test API calls with mock server, verify error handling, test loading state transitions, check debounce functionality",
        "dependencies": [
          8
        ]
      },
      {
        "id": 10,
        "title": "Build search and filter functionality",
        "description": "Implement real-time search for repositories and tags with debouncing",
        "status": "pending",
        "priority": "medium",
        "details": "Create search input handlers with debouncing. Implement client-side filtering as fallback. Update UI dynamically with search results. Maintain search state across navigation. Add clear search functionality.",
        "testStrategy": "Test search with various inputs, verify debounce timing, check result accuracy, test clear functionality",
        "dependencies": [
          9
        ]
      },
      {
        "id": 11,
        "title": "Implement sorting functionality",
        "description": "Add sorting controls for repositories and tags by name, date, and size",
        "status": "pending",
        "priority": "medium",
        "details": "Create sort dropdown controls. Implement sort logic for multiple fields. Add ascending/descending toggle. Maintain sort state in URL parameters. Update UI to reflect current sort.",
        "testStrategy": "Test all sort combinations, verify sort persistence, check sort direction toggle, validate with edge cases",
        "dependencies": [
          9
        ]
      },
      {
        "id": 12,
        "title": "Create pagination controls",
        "description": "Build pagination UI with page size options and navigation controls",
        "status": "pending",
        "priority": "medium",
        "details": "Create pagination component with page numbers. Add page size selector (20/50/100). Implement previous/next navigation. Show current page and total pages. Update URL with pagination state.",
        "testStrategy": "Test page navigation, verify page size changes, check boundary conditions, test URL state persistence",
        "dependencies": [
          9
        ]
      },
      {
        "id": 13,
        "title": "Implement pull command generation and clipboard copy",
        "description": "Generate Docker pull commands and implement clipboard copy functionality",
        "status": "pending",
        "priority": "high",
        "details": "Generate pull commands with registry URL and tag. Create copy button with visual feedback. Implement clipboard API with fallback. Show success notification on copy. Handle long registry URLs gracefully.",
        "testStrategy": "Test command generation accuracy, verify clipboard functionality, test fallback for older browsers, check visual feedback",
        "dependencies": [
          4,
          9
        ]
      },
      {
        "id": 14,
        "title": "Create Docker configuration",
        "description": "Set up Dockerfiles for backend and frontend, create docker-compose.yml for orchestration",
        "status": "pending",
        "priority": "high",
        "details": "Create Dockerfile.backend with Python/FastAPI setup. Create Dockerfile.frontend with nginx for static files. Write docker-compose.yml with service definitions. Configure environment variables and networks. Set up health checks.",
        "testStrategy": "Build and run containers successfully, verify service connectivity, test environment variable injection, check auto-restart",
        "dependencies": [
          3,
          4,
          13
        ]
      },
      {
        "id": 15,
        "title": "Testing and deployment preparation",
        "description": "Perform integration testing, fix bugs, optimize performance, and prepare deployment documentation",
        "status": "pending",
        "priority": "high",
        "details": "Run end-to-end tests with real Registry. Fix identified bugs and issues. Optimize API response times and caching. Create deployment README with instructions. Test full deployment with docker-compose.",
        "testStrategy": "Complete E2E test suite, performance benchmarks meet requirements, deployment runs without manual intervention",
        "dependencies": [
          14
        ]
      }
    ],
    "metadata": {
      "projectName": "RepoVista - Docker Registry Web UI",
      "description": "A web-based user interface for Docker Registry that enables developers to easily browse, search, and select Docker images for deployment",
      "createdAt": "2025-01-07T10:00:00Z",
      "lastUpdated": "2025-01-07T10:00:00Z",
      "version": "1.0.0",
      "created": "2025-08-07T11:37:59.167Z",
      "updated": "2025-08-07T11:48:49.115Z"
    }
  }
}