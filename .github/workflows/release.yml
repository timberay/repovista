name: Release Management

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Get version from tag
      id: get_version
      run: echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
    
    - name: Generate changelog
      id: changelog
      run: |
        echo "# Changelog" > CHANGELOG.md
        git log --pretty=format:"- %s" $(git describe --tags --abbrev=0 HEAD^)..HEAD >> CHANGELOG.md
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ steps.get_version.outputs.version }}
        body_path: CHANGELOG.md
        draft: false
        prerelease: ${{ contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

  build-artifacts:
    name: Build Release Artifacts
    needs: create-release
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        include:
          - name: docker-compose-bundle
            path: .
            files: "docker-compose.yml docker-compose.prod.yml .env.example README.md"
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create release bundle
      run: |
        mkdir -p release-bundle
        cp ${{ matrix.files }} release-bundle/
        tar -czf repovista-${{ needs.create-release.outputs.version }}.tar.gz release-bundle/
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ./repovista-${{ needs.create-release.outputs.version }}.tar.gz
        asset_name: repovista-${{ needs.create-release.outputs.version }}.tar.gz
        asset_content_type: application/gzip

  docker-release:
    name: Docker Hub Release
    needs: create-release
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push backend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/repovista-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/repovista-backend:${{ needs.create-release.outputs.version }}
          ghcr.io/${{ github.repository }}-backend:latest
          ghcr.io/${{ github.repository }}-backend:${{ needs.create-release.outputs.version }}
        platforms: linux/amd64,linux/arm64
    
    - name: Build and push frontend
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/repovista-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/repovista-frontend:${{ needs.create-release.outputs.version }}
          ghcr.io/${{ github.repository }}-frontend:latest
          ghcr.io/${{ github.repository }}-frontend:${{ needs.create-release.outputs.version }}
        platforms: linux/amd64,linux/arm64